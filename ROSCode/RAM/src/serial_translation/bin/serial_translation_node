#! /usr/bin/env python

import sys
import rospy
import serial
import struct
from std_msgs.msg import UInt8MultiArray

PACKET_SIZE = 512

class SerialTranslationLayer:
    def __init__(self):
        self.port = rospy.get_param('~port', '/dev/ttyUSB0')
        self.baud = rospy.get_param('~baud', 4800)

        self.buffer = ""
        self.serial_handle = serial.Serial(
            port='/dev/ttyUSB0',
            baudrate=4800,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS
        )
        self.serial_handle.close()
        self.serial_handle.open()
        self.serial_handle.isOpen()
        self.check_serial_timer = rospy.Timer(rospy.Duration(0.1), self.incomingFromRam)
        self.pub = rospy.Publisher("serial_output", UInt8MultiArray, queue_size=10)
        self.sub = rospy.Subscriber("serial_input", UInt8MultiArray, self.incomingFromGround)


    def incomingFromGround(self, msg):
        self.serial_handle.flushOutput()
        rospy.loginfo("Sending to RAM... %d bytes", self.serial_handle.write((msg.data)))
        return

    def incomingFromRam(self, event):
        available = self.serial_handle.inWaiting()

        if available > 0:
            rospy.loginfo("Receiving from RAM... %d bytes", available)
            msg = UInt8MultiArray()
            msg.data = self.serial_handle.read(available)
            self.pub.publish(msg)

        return

def main():
    rospy.init_node("serial_translation_node", sys.argv, anonymous=True)
    layer = SerialTranslationLayer()
    rospy.spin()


if __name__ == '__main__':
    main()
