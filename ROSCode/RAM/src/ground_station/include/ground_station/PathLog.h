// Generated by gencpp from file ground_station/PathLog.msg
// DO NOT EDIT!


#ifndef GROUND_STATION_MESSAGE_PATHLOG_H
#define GROUND_STATION_MESSAGE_PATHLOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ground_station
{
template <class ContainerAllocator>
struct PathLog_
{
  typedef PathLog_<ContainerAllocator> Type;

  PathLog_()
    : target_pos_x(0.0)
    , target_pos_y(0.0)
    , target_pos_z(0.0)
    , target_pos_angle(0.0)
    , current_pos_joint1(0)
    , current_pos_joint2(0)
    , current_pos_joint3(0)
    , current_pos_joint4(0)
    , current_pos_joint5(0)
    , total_trial_count(0)
    , trial_ID(0)
    , pathstep_time_start(0)
    , pathstep_time_end(0)
    , gripper_position(0)  {
    }
  PathLog_(const ContainerAllocator& _alloc)
    : target_pos_x(0.0)
    , target_pos_y(0.0)
    , target_pos_z(0.0)
    , target_pos_angle(0.0)
    , current_pos_joint1(0)
    , current_pos_joint2(0)
    , current_pos_joint3(0)
    , current_pos_joint4(0)
    , current_pos_joint5(0)
    , total_trial_count(0)
    , trial_ID(0)
    , pathstep_time_start(0)
    , pathstep_time_end(0)
    , gripper_position(0)  {
  (void)_alloc;
    }



   typedef float _target_pos_x_type;
  _target_pos_x_type target_pos_x;

   typedef float _target_pos_y_type;
  _target_pos_y_type target_pos_y;

   typedef float _target_pos_z_type;
  _target_pos_z_type target_pos_z;

   typedef float _target_pos_angle_type;
  _target_pos_angle_type target_pos_angle;

   typedef uint16_t _current_pos_joint1_type;
  _current_pos_joint1_type current_pos_joint1;

   typedef uint16_t _current_pos_joint2_type;
  _current_pos_joint2_type current_pos_joint2;

   typedef uint16_t _current_pos_joint3_type;
  _current_pos_joint3_type current_pos_joint3;

   typedef uint16_t _current_pos_joint4_type;
  _current_pos_joint4_type current_pos_joint4;

   typedef uint16_t _current_pos_joint5_type;
  _current_pos_joint5_type current_pos_joint5;

   typedef uint16_t _total_trial_count_type;
  _total_trial_count_type total_trial_count;

   typedef uint16_t _trial_ID_type;
  _trial_ID_type trial_ID;

   typedef uint32_t _pathstep_time_start_type;
  _pathstep_time_start_type pathstep_time_start;

   typedef uint32_t _pathstep_time_end_type;
  _pathstep_time_end_type pathstep_time_end;

   typedef uint16_t _gripper_position_type;
  _gripper_position_type gripper_position;





  typedef boost::shared_ptr< ::ground_station::PathLog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ground_station::PathLog_<ContainerAllocator> const> ConstPtr;

}; // struct PathLog_

typedef ::ground_station::PathLog_<std::allocator<void> > PathLog;

typedef boost::shared_ptr< ::ground_station::PathLog > PathLogPtr;
typedef boost::shared_ptr< ::ground_station::PathLog const> PathLogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ground_station::PathLog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ground_station::PathLog_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ground_station

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ground_station': ['/home/korisd/tUR/ROSCode/RAM/src/ground_station/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ground_station::PathLog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ground_station::PathLog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_station::PathLog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_station::PathLog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_station::PathLog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_station::PathLog_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ground_station::PathLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4987ff2ab637dda47a571f2413b57558";
  }

  static const char* value(const ::ground_station::PathLog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4987ff2ab637dda4ULL;
  static const uint64_t static_value2 = 0x7a571f2413b57558ULL;
};

template<class ContainerAllocator>
struct DataType< ::ground_station::PathLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ground_station/PathLog";
  }

  static const char* value(const ::ground_station::PathLog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ground_station::PathLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 target_pos_x\n\
float32 target_pos_y\n\
float32 target_pos_z\n\
float32 target_pos_angle\n\
uint16 current_pos_joint1\n\
uint16 current_pos_joint2\n\
uint16 current_pos_joint3\n\
uint16 current_pos_joint4\n\
uint16 current_pos_joint5\n\
uint16 total_trial_count\n\
uint16 trial_ID\n\
uint32 pathstep_time_start\n\
uint32 pathstep_time_end\n\
uint16 gripper_position\n\
";
  }

  static const char* value(const ::ground_station::PathLog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ground_station::PathLog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_pos_x);
      stream.next(m.target_pos_y);
      stream.next(m.target_pos_z);
      stream.next(m.target_pos_angle);
      stream.next(m.current_pos_joint1);
      stream.next(m.current_pos_joint2);
      stream.next(m.current_pos_joint3);
      stream.next(m.current_pos_joint4);
      stream.next(m.current_pos_joint5);
      stream.next(m.total_trial_count);
      stream.next(m.trial_ID);
      stream.next(m.pathstep_time_start);
      stream.next(m.pathstep_time_end);
      stream.next(m.gripper_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathLog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ground_station::PathLog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ground_station::PathLog_<ContainerAllocator>& v)
  {
    s << indent << "target_pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.target_pos_x);
    s << indent << "target_pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.target_pos_y);
    s << indent << "target_pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.target_pos_z);
    s << indent << "target_pos_angle: ";
    Printer<float>::stream(s, indent + "  ", v.target_pos_angle);
    s << indent << "current_pos_joint1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_pos_joint1);
    s << indent << "current_pos_joint2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_pos_joint2);
    s << indent << "current_pos_joint3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_pos_joint3);
    s << indent << "current_pos_joint4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_pos_joint4);
    s << indent << "current_pos_joint5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_pos_joint5);
    s << indent << "total_trial_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.total_trial_count);
    s << indent << "trial_ID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.trial_ID);
    s << indent << "pathstep_time_start: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pathstep_time_start);
    s << indent << "pathstep_time_end: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pathstep_time_end);
    s << indent << "gripper_position: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gripper_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUND_STATION_MESSAGE_PATHLOG_H
