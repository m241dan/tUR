// Generated by gencpp from file ground_station/BBox.msg
// DO NOT EDIT!


#ifndef GROUND_STATION_MESSAGE_BBOX_H
#define GROUND_STATION_MESSAGE_BBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ground_station
{
template <class ContainerAllocator>
struct BBox_
{
  typedef BBox_<ContainerAllocator> Type;

  BBox_()
    : time_recorded(0)
    , rocker_horiz(0)
    , rocker_verti(0)
    , toggle_horiz(0)
    , toggle_verti(0)
    , button_blu(0)
    , button_blu_press_recorded(0)
    , flap(0)
    , potentiometer_lever(0)
    , potentiometer_knob(0)  {
    }
  BBox_(const ContainerAllocator& _alloc)
    : time_recorded(0)
    , rocker_horiz(0)
    , rocker_verti(0)
    , toggle_horiz(0)
    , toggle_verti(0)
    , button_blu(0)
    , button_blu_press_recorded(0)
    , flap(0)
    , potentiometer_lever(0)
    , potentiometer_knob(0)  {
  (void)_alloc;
    }



   typedef uint32_t _time_recorded_type;
  _time_recorded_type time_recorded;

   typedef uint8_t _rocker_horiz_type;
  _rocker_horiz_type rocker_horiz;

   typedef uint8_t _rocker_verti_type;
  _rocker_verti_type rocker_verti;

   typedef uint8_t _toggle_horiz_type;
  _toggle_horiz_type toggle_horiz;

   typedef uint8_t _toggle_verti_type;
  _toggle_verti_type toggle_verti;

   typedef uint8_t _button_blu_type;
  _button_blu_type button_blu;

   typedef uint32_t _button_blu_press_recorded_type;
  _button_blu_press_recorded_type button_blu_press_recorded;

   typedef uint8_t _flap_type;
  _flap_type flap;

   typedef uint8_t _potentiometer_lever_type;
  _potentiometer_lever_type potentiometer_lever;

   typedef uint8_t _potentiometer_knob_type;
  _potentiometer_knob_type potentiometer_knob;





  typedef boost::shared_ptr< ::ground_station::BBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ground_station::BBox_<ContainerAllocator> const> ConstPtr;

}; // struct BBox_

typedef ::ground_station::BBox_<std::allocator<void> > BBox;

typedef boost::shared_ptr< ::ground_station::BBox > BBoxPtr;
typedef boost::shared_ptr< ::ground_station::BBox const> BBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ground_station::BBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ground_station::BBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ground_station

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ground_station': ['/home/korisd/tUR/ROSCode/RAM/src/ground_station/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ground_station::BBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ground_station::BBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_station::BBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_station::BBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_station::BBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_station::BBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ground_station::BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a4ca5e2de1335a072d49b3556bffcd7";
  }

  static const char* value(const ::ground_station::BBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a4ca5e2de1335a0ULL;
  static const uint64_t static_value2 = 0x72d49b3556bffcd7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ground_station::BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ground_station/BBox";
  }

  static const char* value(const ::ground_station::BBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ground_station::BBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 time_recorded\n\
\n\
uint8 rocker_horiz\n\
uint8 rocker_verti\n\
uint8 toggle_horiz\n\
uint8 toggle_verti\n\
uint8 button_blu\n\
uint32 button_blu_press_recorded\n\
uint8 flap\n\
uint8 potentiometer_lever\n\
uint8 potentiometer_knob\n\
";
  }

  static const char* value(const ::ground_station::BBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ground_station::BBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_recorded);
      stream.next(m.rocker_horiz);
      stream.next(m.rocker_verti);
      stream.next(m.toggle_horiz);
      stream.next(m.toggle_verti);
      stream.next(m.button_blu);
      stream.next(m.button_blu_press_recorded);
      stream.next(m.flap);
      stream.next(m.potentiometer_lever);
      stream.next(m.potentiometer_knob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ground_station::BBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ground_station::BBox_<ContainerAllocator>& v)
  {
    s << indent << "time_recorded: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_recorded);
    s << indent << "rocker_horiz: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rocker_horiz);
    s << indent << "rocker_verti: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rocker_verti);
    s << indent << "toggle_horiz: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.toggle_horiz);
    s << indent << "toggle_verti: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.toggle_verti);
    s << indent << "button_blu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_blu);
    s << indent << "button_blu_press_recorded: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.button_blu_press_recorded);
    s << indent << "flap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flap);
    s << indent << "potentiometer_lever: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.potentiometer_lever);
    s << indent << "potentiometer_knob: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.potentiometer_knob);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUND_STATION_MESSAGE_BBOX_H
